# Copyright (c) Facebook, Inc. and its affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: WMG - WhatsApp Measurement Gateway (a filter for automatically identifying conversational signals)

# Ref.: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html
# Ref.: https://github.com/aws/aws-sam-cli-app-templates
#---
# SAM CLI (examples)
# sam validate -t iac.yaml --lint
#
# sam init --runtime nodejs18.x
# sam init --runtime nodejs18.x --app-template quick-start-sqs --name prjLambda2
#
# sam build -t iac.yaml
# sam deploy -g --stack-name bizeng-latam-wmg-stk
# sam logs -n MyAWSomeLambda --stack-name bizeng-latam-wmg-stk --tail
#
# aws cloudformation delete-stack --stack-name bizeng-latam-wmg-stk --region sa-east-1
# or
# sam delete --stack-name bizeng-latam-wmg-stk

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Parameters:
  WMGDatabaseClusterUsername:
    Type: String
    Default: admin
  WMGDatabaseClusterDBName:
    Type: String
    Default: wmgdb

#---
Resources:
  # S3 to store csvs
  WMGOutputBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName:
        Fn::Join:
          - "-"
          - - !Ref "AWS::StackName"
            - "wmg-output"

  # 1st Lambda - from api gateway to sqs + middleman between Client and WA servers (with implicit API Gateway FOR NOW)
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  RouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Calls WA Cloud API and enqueues task'
      Runtime: nodejs18.x
      CodeUri: router
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      Role: !GetAtt RouterRole.Arn
      Environment:
        Variables:
          QUEUE_URL: !Ref SentMessageQueue
      Events:
        CloudAPIRouter:
          Type: Api
          Properties:
            Path: /{business_phone_number_id}/messages
            Method: post
            # ApiId: !Ref MyHttpApiGateway ==> explicit API Gateway

  SentMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
          - "-"
          - - !Ref "AWS::StackName"
            - "wmg-processing-messages-queue"
      VisibilityTimeout: 60
      #SqsManagedSseEnabled: false

  ProcessSignalsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: 'Process SQS messages searching for keywords to be saved in the signals table'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      CodeUri: process_signals
      Handler: index.lambdaHandler
      Role: !GetAtt RDSnSQSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !GetAtt WMGDatabaseCluster.MasterUserSecret.SecretArn
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        NewMessageOnQueue:
          Type: SQS #https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-sqs.html
          Properties:
            Queue: !GetAtt SentMessageQueue.Arn
            BatchSize: 1

  ManageKeywordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'API to make CRUD operations in keywords table'
      Runtime: nodejs18.x
      CodeUri: manage_keywords
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      Role: !GetAtt RDSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !GetAtt WMGDatabaseCluster.MasterUserSecret.SecretArn
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        GetAllKeywords:
          Type: Api
          Properties:
            Path: /keywords
            Method: get
        GetKeywordById:
          Type: Api
          Properties:
            Path: /keywords/{id}
            Method: get
        CreateKeyword:
          Type: Api
          Properties:
            Path: /keywords
            Method: post
        UpdateKeywordById:
          Type: Api
          Properties:
            Path: /keywords/{id}
            Method: put

  CampaignsPerformanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Generate output file with campaigns performance info'
      Runtime: nodejs18.x
      CodeUri: campaigns_performance
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      Role: !GetAtt CampaignsPerformanceRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref WMGOutputBucket
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !GetAtt WMGDatabaseCluster.MasterUserSecret.SecretArn
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        GenerateCSV:
          Type: Api
          Properties:
            Path: /campaigns-performance/{waba_id}
            Method: post

  WMGDatabaseCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      MasterUsername: !Ref WMGDatabaseClusterUsername
      ManageMasterUserPassword: true
      MasterUserSecret:
        KmsKeyId: !Ref WMGKMSKey
      DBClusterIdentifier:
        Fn::Join:
          - "-"
          - - !Ref "AWS::StackName"
            - "wmg-db-cluster"
      DatabaseName: !Ref WMGDatabaseClusterDBName
      Engine: "aurora-mysql" # TO DO: check if aurora is really the best option (https://www.percona.com/blog/when-should-i-use-amazon-aurora-and-when-should-i-use-rds-mysql/)
      # EngineMode: serverless # Unavailable (if needed test if it is available in other regions) https://stackoverflow.com/questions/67465246/the-engine-mode-serverless-you-requested-is-currently-unavailable-with-5-7-2-07
      # ScalingConfiguration: # for serverless
      #   AutoPause: true # TO DO: double check this for the final version
      #   MaxCapacity: 10
      #   MinCapacity: 1
      #   SecondsUntilAutoPause: 300 # TO DO: double check this for the final version
      DBSubnetGroupName: default-vpc-0512fa1bdb55d87c1
        # Ref: default-vpc-0512fa1bdb55d87c1
  WMGDatabaseInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier:
        Ref: WMGDatabaseCluster
      DBInstanceClass: db.t3.medium
      Engine: "aurora-mysql"
      PubliclyAccessible: "true"
  WMGKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Manual test KMS key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Ref "AWS::StackName"
        Statement:
          - Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                Fn::Sub: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - "kms:*"
            Resource: "*"

  DBInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Creates db tables schema on cfn stack creation'
      Runtime: nodejs18.x
      CodeUri: db_init
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      Role: !GetAtt RDSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !GetAtt WMGDatabaseCluster.MasterUserSecret.SecretArn
          DB_NAME: !Ref WMGDatabaseClusterDBName

  DBInitCustomResource:
    Type: 'Custom::LambdaRDS' # Could be anything in place of 'LambdaRDS'
    Properties:
      ServiceToken: !GetAtt DBInitFunction.Arn
      StackName: !Ref "AWS::StackName"

#--- IAM Roles
  RDSAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  RDSnSQSAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - !Ref SQSConsumePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  RouterRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref SQSWritePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  CampaignsPerformanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - !Ref S3WritePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  RDSAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - kms:GetParametersForImport
              - kms:GetPublicKey
              - kms:Decrypt
              - secretsmanager:GetSecretValue
              - kms:GetKeyRotationStatus
              - kms:GetKeyPolicy
              - kms:DescribeKey
            Resource:
              - !GetAtt WMGKMSKey.Arn
              - !GetAtt WMGDatabaseCluster.MasterUserSecret.SecretArn

  SQSWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt SentMessageQueue.Arn

  SQSConsumePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource:
              - !GetAtt SentMessageQueue.Arn

  S3WritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: My S3 Access Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${WMGOutputBucket}/*"

#---
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  EndpointsBaseURL:
    Description: "API Gateway base endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
