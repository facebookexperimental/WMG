# Copyright (c) Facebook, Inc. and its affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: WMG - WhatsApp Measurement Gateway

# Ref.: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html
# Ref.: https://github.com/aws/aws-sam-cli-app-templates
#---
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Parameters:
  WMGDatabaseClusterUsername:
    Type: String
    Default: admin
  WMGDatabaseClusterDBName:
    Type: String
    Default: wmgdb
  WMGDatabaseBackupRetentionDays:
    Type: Number
    Description: Number of days to retain database backups
    Default: 7
    MinValue: 0
    MaxValue: 35
  WMGSecurityToken:
    Type: String
    Default: ""
    Description: You must define a token that will need to be passed in the Authorization header when calling the APIs.
    NoEcho: true
  WebhookEndpointName:
    Description: Examples are subscribe,subscribe-notifications, post-notifications,etc.
    Type: String
    Default: subscribe-notif
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*"
  WebhookStageName:
    Description: Examples are v1,test,prod,etc.
    Type: String
    Default: v1
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
  WebhookLogRetentionDays:
    Default: '7'
    Description: Number of days to retain logs in CloudWatch
    Type: Number
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    ConstraintDescription: must select a valid retention value
    Type: String
  CAPIGraphApiVersion:
    Type: String
    Default: "20.0"
    Description: You must define the graph api version used to call CAPI.
  CAPISecurityToken:
    Type: String
    Default: ""
    Description: You must define a token that will need to be passed in the CAPI integration.
    NoEcho: true
  CAPIIntegrationEnabled:
    Type: String
    AllowedValues: [true, false]
    Description: Flag to enable CAPI Integration
  CAPIPageId:
    Type: String
    Default: ""
    Description: Page id responisble for running CTWA events
  CAPIDataSourceId:
    Type: String
    Default: ""
    Description: Data source responsible for receiving business messaging signals

#---
Resources:

  #lambda function to return business messaging signals
  CapiIntegrationRulesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'API to get capi events'
      Runtime: nodejs18.x
      CodeUri: capi_integration
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt RDSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        GetAllAudienceRules:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /capi_events
            Method: get

  # lambda for webhook processing
  WebhookProcessing:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Proccess messaging payload'
      Runtime: nodejs18.x
      CodeUri: webhook_processing
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      Role: !GetAtt RoleForWebhookLambda.Arn
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeadLetterQueueForLambdaFailures.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
          CAPI_INTEGRATION_ENABLED: !Ref CAPIIntegrationEnabled
          CAPI_PAGE_ID: !Ref CAPIPageId
          CAPI_DATASOURCE_ID: !Ref CAPIDataSourceId
          CAPI_TOKEN_SECRET_ARN: !Ref CAPISecurityTokenSecret
          CAPI_GRAPHAPI_VERSION: !Ref CAPIGraphApiVersion

  DeadLetterQueueForLambdaFailures:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144 # 256 KB
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub "${AWS::StackName}-DeadLetterQueueForLambdaFailures"
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 90

  SQSMappingToLambda:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled : True
      EventSourceArn: !GetAtt DeadLetterQueueForLambdaFailures.Arn
      FunctionName: !GetAtt WebhookProcessing.Arn

  LogGroupWebhookProcessing:
    Type: AWS::Logs::LogGroup
    DependsOn: WebhookProcessing
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref WebhookProcessing]]
      RetentionInDays: !Ref WebhookLogRetentionDays

  SNSTopicForWABizNotifs:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AWS::StackName}-SNSTopicForWABizNotifs"
      TopicName: !Sub "${AWS::StackName}-SNSTopicForWABizNotifs"
      Subscription:
        - Endpoint: !GetAtt WebhookProcessing.Arn
          Protocol: lambda

  RestAPIForWABizNotifs:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - EDGE
      Name: !Sub "${AWS::StackName}-RestAPIForWABizNotifs"

  RestAPIEndPoint:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:  !Ref RestAPIForWABizNotifs
      ParentId: !GetAtt RestAPIForWABizNotifs.RootResourceId
      PathPart: !Ref WebhookEndpointName

  RestAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref RestAPIDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: '/*'
          MetricsEnabled: true
      RestApiId: !Ref RestAPIForWABizNotifs
      StageName: !Ref WebhookStageName

  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - EndpointPostMethod
      - EndpointGetMethod
    Properties:
      RestApiId: !Ref RestAPIForWABizNotifs

  EndpointPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        PassthroughBehavior: NEVER
        RequestTemplates: {
            "application/json":
            !Sub "Action=Publish&TopicArn=$util.urlEncode('arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicForWABizNotifs.TopicName}')&Message=$util.urlEncode($input.body)"
        }
        RequestParameters: {
          "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'"
        }
        Credentials : !GetAtt RoleForWebhookAPIGateway.Arn
        Uri:  !Sub "arn:aws:apigateway:${AWS::Region}:sns:path/${AWS::AccountId}/${SNSTopicForWABizNotifs.TopicName}"
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref RestAPIEndPoint
      RestApiId: !Ref RestAPIForWABizNotifs
      MethodResponses:
        - StatusCode: 200

  EndpointGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: MOCK
        PassthroughBehavior: NEVER
        Credentials : !GetAtt RoleForWebhookAPIGateway.Arn
        RequestTemplates: {
          "application/json": "{\n \"statusCode\": 200\n}"
        }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.params()['querystring']['hub.challenge']
      ResourceId: !Ref RestAPIEndPoint
      RestApiId: !Ref RestAPIForWABizNotifs
      MethodResponses:
        - StatusCode: 200

  RestAPICloudWatchLogs:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt RoleForWebhookAPIGateway.Arn

  InvokeLambdaPermissionForSNS:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref WebhookProcessing
      Principal: sns.amazonaws.com

  # S3 to store csvs
  WMGOutputBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName:
        Fn::Join:
          - "-"
          - - !Ref "AWS::StackName"
            - "wmg-output"

  LambdasAuthAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: DefaultTokenAuthorizer
        Authorizers:
          DefaultTokenAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn
            Identity:
              Header: WMG-Security-Token
              ReauthorizeEvery: 60

  WMGSecurityTokenSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub 'WMGSecurityTokenSecret-${AWS::StackName}'
      Description: WMG Security Token set during deploy and used to authenticate API calls
      SecretString: !Sub '{"WMGSecurityToken": "${WMGSecurityToken}"}'

  CAPISecurityTokenSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub 'CAPISecurityTokenSecret-${AWS::StackName}'
      Description: CAPI Security Token set during deploy and used to authenticate API calls
      SecretString: !Sub '{"CAPISecurityToken": "${CAPISecurityToken}"}'

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Authenticates API calls'
      Runtime: nodejs18.x
      CodeUri: authorizer
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      Role: !GetAtt SecurityTokenAccessRole.Arn
      Environment:
        Variables:
          SECURITY_TOKEN_ARN: !Ref WMGSecurityTokenSecret

  RouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Calls WA Cloud API and enqueues task'
      Runtime: nodejs18.x
      CodeUri: router
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt RouterRole.Arn
      Environment:
        Variables:
          QUEUE_URL: !Ref SentMessageQueue
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        CloudAPIRouter:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE # Turn off Authorization for this function
            RestApiId: !Ref LambdasAuthAPI
            Path: /{business_phone_number_id}/messages
            Method: post

  SentMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
          - "-"
          - - !Ref "AWS::StackName"
            - "wmg-processing-messages-queue"
      VisibilityTimeout: 60

  ProcessSignalsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: 'Process SQS messages searching for keywords to be saved in the signals table'
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      CodeUri: process_signals
      Handler: index.lambdaHandler
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt RDSnSQSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        NewMessageOnQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt SentMessageQueue.Arn
            BatchSize: 1

  ManageKeywordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'API to make CRUD operations in keywords table'
      Runtime: nodejs18.x
      CodeUri: manage_keywords
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt RDSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        GetAllKeywords:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /keywords
            Method: get
        GetKeywordById:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /keywords/{id}
            Method: get
        CreateKeyword:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /keywords
            Method: post
        UpdateKeywordById:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /keywords/{id}
            Method: put

  ManageAudienceRulesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'API to make CRUD operations in Audience Rules table'
      Runtime: nodejs18.x
      CodeUri: audience_rules
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt RDSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        GetAllAudienceRules:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /audience_rules
            Method: get
        CreateAudienceRule:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /audience_rules
            Method: post
        DeleteAllAudienceRules:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /audience_rules
            Method: delete

  ManageEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'API to inject events in Events table'
      Runtime: nodejs18.x
      CodeUri: events
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt RDSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        GetAllEvents:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /events
            Method: get
        CreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /events
            Method: post
        DeleteAllEvents:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /events
            Method: delete

  CampaignsPerformanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Generate output file with campaigns performance info'
      Runtime: nodejs18.x
      CodeUri: campaigns_performance
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt CampaignsPerformanceRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref WMGOutputBucket
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        GenerateCSV:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /campaigns-performance/{waba_id}
            Method: post

  ManageLiftStudies:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'API to manage Lift Studies'
      Runtime: python3.11
      CodeUri: lift_studies
      Handler: lift_studies.lambda_handler
      Architectures:
        - x86_64
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt LiftStudiesRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref WMGOutputBucket
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName
      Events:
        CreateLiftStudy:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /lift_studies
            Method: post
        GetAllLiftStudies:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /lift_studies
            Method: get
        GetLiftStudyResults:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /lift_studies/{id}/results
            Method: get
        PauseLiftStudy:
          Type: Api
          Properties:
            RestApiId: !Ref LambdasAuthAPI
            Path: /lift_studies/{id}
            Method: patch

  # create VPC
  WMGVPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: 172.32.0.0/16
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'

  # create subnets
  WMGPrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WMGVPC
      CidrBlock: 172.32.0.0/20
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: WMGPrivateDBSubnet1

  WMGPrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WMGVPC
      CidrBlock: 172.32.16.0/20
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: WMGPrivateDBSubnet2

  WMGPrivateLambdaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WMGVPC
      CidrBlock: 172.32.32.0/20
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: WMGPrivateLambdaSubnet1

  WMGPrivateLambdaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WMGVPC
      CidrBlock: 172.32.48.0/20
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: WMGPrivateLambdaSubnet2

  WMGPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WMGVPC
      CidrBlock: 172.32.64.0/20
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: WMGPublicSubnet1

  WMGPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WMGVPC
      CidrBlock: 172.32.80.0/20
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: WMGPublicSubnet2

  # create and attach internet gateway
  WMGInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: WMGInternetGateway

  WMGAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WMGVPC
      InternetGatewayId: !Ref WMGInternetGateway

  # create route tables
  WMGCustomRouteTable:
    DependsOn: WMGAttachInternetGateway
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WMGVPC
      Tags:
      - Key: Name
        Value: WMGCustomRouteTable

  WMGRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WMGVPC
      Tags:
      - Key: Name
        Value: WMGRouteTable

 # attach route tables
  WMGSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WMGPrivateDBSubnet1
      RouteTableId: !Ref WMGRouteTable

  WMGSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WMGPrivateDBSubnet2
      RouteTableId: !Ref WMGRouteTable

  WMGSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WMGPrivateLambdaSubnet1
      RouteTableId: !Ref WMGRouteTable

  WMGSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WMGPrivateLambdaSubnet2
      RouteTableId: !Ref WMGRouteTable

  # public subnets get attached to WMGCustomRouteTable
  WMGSubnetRouteTableAssociation5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WMGPublicSubnet1
      RouteTableId: !Ref WMGCustomRouteTable

  WMGSubnetRouteTableAssociation6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WMGPublicSubnet2
      RouteTableId: !Ref WMGCustomRouteTable

  # create and attach NAT gateway
  WMGNAT:
    DependsOn: WMGVPC
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [WMGEIP,AllocationId]
      SubnetId: !Ref WMGPublicSubnet1

  WMGEIP:
    DependsOn: WMGAttachInternetGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # create routes
  WMGRouteToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WMGRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WMGNAT

  WMGRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WMGCustomRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref WMGInternetGateway

  # create security groups
  WMGRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow My SQL access from lambda subnets
      VpcId:
        Ref: WMGVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId : !Ref WMGLambdaSecurityGroup
      Tags:
      - Key: Name
        Value: WMGRDSSecurityGroup

  WMGLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda ENIs
      VpcId:
        Ref: WMGVPC
      Tags:
      - Key: Name
        Value: WMGLambdaSecurityGroup

  # Create Db subnet groups for RDS instance
  WMGDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "description"
      SubnetIds:
        - !Ref WMGPrivateDBSubnet1
        - !Ref WMGPrivateDBSubnet2
      Tags:
        -
          Key: "Name"
          Value: "WMGDBSubnetGroup"

  WMGDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${WMGDatabaseClusterDBName}-AuroraUserSecret-${AWS::StackName}'
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${WMGDatabaseClusterUsername}"}'
        GenerateStringKey: password
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  WMGDatabaseCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      MasterUsername: !Sub '{{resolve:secretsmanager:${WMGDBSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${WMGDBSecret}:SecretString:password}}'
      DBClusterIdentifier:
        Fn::Join:
          - "-"
          - - !Ref "AWS::StackName"
            - "wmg-db-cluster"
      DatabaseName: !Ref WMGDatabaseClusterDBName
      Engine: "aurora-mysql"
      DBSubnetGroupName: !Ref WMGDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref WMGRDSSecurityGroup
      BackupRetentionPeriod: !Ref WMGDatabaseBackupRetentionDays
  WMGDatabaseInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier:
        Ref: WMGDatabaseCluster
      DBInstanceClass: db.t3.medium
      Engine: "aurora-mysql"

  DBInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Creates db tables schema on cfn stack creation'
      Runtime: nodejs18.x
      CodeUri: db_init
      Handler: index.lambdaHandler
      Architectures:
        - x86_64
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref WMGLambdaSecurityGroup
        SubnetIds:
          - !Ref WMGPrivateLambdaSubnet1
          - !Ref WMGPrivateLambdaSubnet2
      Role: !GetAtt RDSAccessRole.Arn
      Environment:
        Variables:
          DB_HOST: !GetAtt WMGDatabaseInstance.Endpoint.Address
          DB_USER: !Ref WMGDatabaseClusterUsername
          DB_SECRET_ARN: !Ref WMGDBSecret
          DB_NAME: !Ref WMGDatabaseClusterDBName

  DBInitCustomResource:
    Type: 'Custom::LambdaRDS'
    Properties:
      ServiceToken: !GetAtt DBInitFunction.Arn
      StackName: !Ref "AWS::StackName"

#--- IAM Roles
  RoleForWebhookLambda:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Policies:
        - PolicyName: LogPolicyForLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
        - PolicyName: SQSAccessPolicyForLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:DeleteMessage'
                  - 'sqs:ReceiveMessage'
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt DeadLetterQueueForLambdaFailures.Arn
        - PolicyName : LambdaFunctionConfigurationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:GetFunctionConfiguration"
                  - "lambda:UpdateFunctionConfiguration"
                Resource: '*'
  RoleForWebhookAPIGateway:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-APIGatewayWebhooksWABizPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "sns:Publish"
                Effect: "Allow"
                Resource: !Ref SNSTopicForWABizNotifs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  RDSAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  RDSnSQSAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - !Ref SQSConsumePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  RouterRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - !Ref SQSWritePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  CampaignsPerformanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - !Ref S3WritePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LiftStudiesRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
        - !Ref S3WritePolicy
        - !Ref S3GetObjectPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  SecurityTokenAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref SecurityTokenAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  SecurityTokenAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref WMGSecurityTokenSecret

  RDSAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref WMGDBSecret
              - !Ref CAPISecurityTokenSecret

  SQSWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt SentMessageQueue.Arn

  SQSConsumePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource:
              - !GetAtt SentMessageQueue.Arn

  S3WritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: My S3 Access Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${WMGOutputBucket}/*"

  S3GetObjectPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: My S3 Access Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource: !Sub "arn:aws:s3:::${WMGOutputBucket}/*"

#---
Outputs:
  EndpointsBaseURL:
    Description: "URL to prefix all endpoints"
    Value:
      Fn::Sub: "https://${LambdasAuthAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  WebhookProcessingArn:
    Description: Webhooks for WABiz Lambda
    Value: !GetAtt WebhookProcessing.Arn
  SQSQueueNameOfDeadLetterQueueForLambdaFailures:
    Description: "QueueName of DeadLetterQueueForLambdaFailures"
    Value: !GetAtt DeadLetterQueueForLambdaFailures.QueueName
  SNSTopicNameOfSNSTopicForWABizNotifs:
    Description: "TopicName of SNS"
    Value: !GetAtt SNSTopicForWABizNotifs.TopicName
  WABizWebhooksURL:
    Description: "Webhook Endpoint for WABiz"
    Value: !Sub "https://${RestAPIForWABizNotifs}.execute-api.${AWS::Region}.amazonaws.com/${WebhookStageName}/${WebhookEndpointName}"
